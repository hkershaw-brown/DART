name: Build Everything On Demand

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    container: 
      image: hkershaw/dart-dep:1.0  
      # Need new container to run with RTTOV
      options: "--cap-add=SYS_PTRACE"

    steps:
      
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set to safe directory
      # Set the repo as safe directory
        run: git config --global --add safe.directory /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}

      - name: Create mkmf.template
      # Copy gfortran mkmf.template only
        run: |
          # echo "RTTOV version ${{ github.event.inputs.rttov_version }}"
          cp build_templates/mkmf.template.gfortran build_templates/mkmf.template

      - name: Run fixsystem
      # Run fixsystem once
        run: |
          export DART=$(git rev-parse --show-toplevel)
          cd $DART/assimilation_code/modules/utilities
          ./fixsystem gfortran
          cd -  # Returns to the previous directory

      - name: Build preprocess
      # Build preprocess once
        run: |
          pp_dir=${{ github.workspace }}/assimilation_code/programs/preprocess
          cd $pp_dir 
          ${{ github.workspace }}/build_templates/mkmf -x -p $pp_dir/preprocess \
                                     -a ${{ github.workspace }} $pp_dir/path_names_preprocess
          cd -

      - name: Modify input.nml files
      # Update input.nm files to avoid race conditions when running preprocess
        run: |
          find $DART -name input.nml -exec sed -i -e "/^[[:space:]]*#/! s|.*output_obs_def_mod_file.*|output_obs_def_mod_file = './obs_def_mod.f90'|g" \
            -e "/^[[:space:]]*#/! s|.*output_obs_qty_mod_file.*|output_obs_qty_mod_file = './obs_kind_mod.f90'|g" \
            -e "/^[[:space:]]*#/! s|.*output_obs_kind_mod_file.*|output_obs_qty_mod_file = './obs_kind_mod.f90'|g" {} \;

      - name: Run quickbuild.sh scripts
      # Run quickbuild.sh scripts and log failures
        shell: bash
        run: |
          # Store the current directory and initialize arrays to hold process IDs, directories, and status codes 
          my_dir=$(pwd)
          pids=()
          dirs=()
          status=()
          
          # Find all quickbuild.sh executable files and remove './' and 'quickbuild.sh'
          files_to_process=( $(find $DART -executable -type f -name quickbuild.sh | sed -E 's#(\./|quickbuild\.sh)##g') )

          # Iterate over each file to and run quickbuild.sh
          for f in "${files_to_process[@]}"; do

          if [[ $f == *"template"* ]]; then
            continue  # template model not for compiling
          fi

          cd $f; echo $f & #./quickbuild.sh &
          
          # Record the PID and directory of the each process then cd back to starting directory
          pids+=( "$!" )
          dirs+=( "$f" )
          cd $my_dir
          done

          # Wait for all background processes to finish and record their exit statuses
          for pid in ${pids[@]}; do
            wait ${pid}
            status+=( "$?" )
          done

          # Check the status of each build process and log results
          i=0
          for st in ${status[@]}; do
            # Display failed vs. passed processes
            if [[ ${st} -ne 0 ]]; then
            echo "$compiler RESULT: $i ${dirs[$i]} FAILED"
            else
            echo "$compiler RESULT: $i ${dirs[$i]} PASSED"
            fi
            ((i+=1))
          done
      # The following should be expected to fail:
        # "./developer_tests/quad_interpolate/work/quickbuild.sh"
        # "./developer_tests/forward_operators/work/quickbuild.sh"
        # "./observations/obs_converters/GOES/work/quickbuild.sh"
        # "./observations/obs_converters/GMI/work/quickbuild.sh"
        # "./observations/obs_converters/NSIDC/work/quickbuild.sh"
        # "./observations/obs_converters/gps/work/quickbuild.sh"
        # "./observations/obs_converters/var/work/quickbuild.sh"
        # "./observations/obs_converters/AIRS/work/quickbuild.sh"
        # "./observations/obs_converters/quikscat/work/quickbuild.sh"
        # "./observations/obs_converters/GSI2DART/work/quickbuild.sh"
        # "./models/template/work/quickbuild.sh"
